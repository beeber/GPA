import peasy.test.*;
import peasy.org.apache.commons.math.*;
import peasy.*;
import peasy.org.apache.commons.math.geometry.*;
import processing.opengl.*;
import saito.objloader.*;
import controlP5.*;

ControlP5 buttonCon; // déclare mes buttons
PeasyCam cam; // déclare ma caméra


//ArrayList<Furniture> furnitures;
ArrayList<Chair> chairs;
BoundingBox bbox;

float[] rotOr = new float[4]; // tableau rotation orthogonale
int a; // valeur box 

void setup() {
  size(1200,800,OPENGL);

  // GUI creation d'un bouton randomizer
  buttonCon = new ControlP5(this);
      buttonCon.addBang("randomizer")
       .setPosition(width-100,height-100 )
       .setSize(50, 50)
       ;
       buttonCon.setAutoDraw(false); // pour eviter que le button soit inscrit dans le mouvement de caméra

  // rotation orthogonale
  rotOr[0]= -PI;
  rotOr[1]= PI/2;
  rotOr[2]= PI;
  rotOr[3]= 2*PI;

  // PEASYcam
  cam = new PeasyCam(this, 0, 0, 0, 500); // valeur de base du point visé (x,y,z, distance)
  cam.setMinimumDistance(500); // distance minimal et maximal de la cam par rapport au model
  cam.setMaximumDistance(5000);
  cam.rotateX(-45); // positionnement de la cam au début
  cam.setYawRotationMode(); // contrainte rotation caméra

  // taille boite fond
  a = 700;

 seed(); // crée une nouvelle seed générative au lancement de la scène
} 

void draw() {
  background(0); 
  fill(100); // de la boite
  box(a, a, 40);
  
  // On parse la liste pour l'affichage
  for(int i=0; i< chairs.size(); i++) {
     pushMatrix();
      //On le bouge à sa place
      translate(chairs.get(i).position.x, chairs.get(i).position.y, chairs.get(i).position.z);
      rotateZ(chairs.get(i).rotation);
      rotateX(-PI/2); // remettre droit
      
      //On dessine
      noStroke();
      chairs.get(i).model.draw();
      popMatrix();
  }  
  gui(); // GUI reste au premier plan, on lui dit de dessiner en dernier
}


// void qui controle l'impact des buttons
void controlEvent(ControlEvent theEvent) { // obligatoire
 if(theEvent.controller().name()=="randomizer") {  // concerne le button "randomizer"
      print("new seed generated");  
      seed(); // quand on clique, on crée une nouvelle seed();
 }
}

// void de génération pure
void seed(){
  
   chairs = new ArrayList<Chair>(); // crée ou vide un tableau
   
  //On charge et "add" des models
  for(int i=0; i<3; i++) { //On decide arbitrairement d'en ajouter 3 de chaque
    for(int j=0; j<4; j++){ // On parcours la liste des chair present dans le dossier(de 0 à 4)
      chairs.add(new Chair(this, "chair"+(j+1)+".obj", new PVector(random(-a/2,a/2),random(-a/2,a/2)), rotOr[int(random(3))]));
    } 
  }
}

// permet à la GUI de rester au premier plan
void gui(){ 
  hint(DISABLE_DEPTH_TEST);
  cam.beginHUD();
  buttonCon.draw();
  cam.endHUD();
  hint(ENABLE_DEPTH_TEST);
}
